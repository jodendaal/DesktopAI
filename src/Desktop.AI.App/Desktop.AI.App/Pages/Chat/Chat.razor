@page "/"
@using Desktop.AI.App.Models;
@using Desktop.AI.App.Pages.Chat.Components
@using OpenAI.Net;
@inject IOpenAIService OpenAIService

<div class="chat-container">
   
    <ConversationContext SearchModel="@SearchModel" IsVisible="@IsConverstionContextVisible"></ConversationContext>

    <div class="chat">
        <CollapseButton IsOpen="@IsConverstionContextVisible" OnClicked="OnHideSidePanelClicked"></CollapseButton>
        <ConversationView Conversation="Conversation"></ConversationView>
        
        <div class="input-area">
            <LoadingIndicator IsBusy="@IsBusy" StatusText="@StatusText"></LoadingIndicator>
            <ErrorIndicator ErrorText="@ErrorText"></ErrorIndicator>
            <ChatInput SearchModel="@SearchModel" OnGenerateTextCompletionSubmitted="Search" IsBusy="@IsBusy" OnGenerateImageClicked="GenerateImage" ></ChatInput>
        </div>
    </div>

</div>


@code{
    private bool IsConverstionContextVisible = true;
    private bool IsBusy = false;
    private string StatusText = string.Empty;
    private string ErrorText = string.Empty;

    SearchModel SearchModel = new SearchModel()
    {
            SearchText = "write me a simple class that adds 2 numbers together and write a unit text using xunit to test it",
            SystemContext = "You are a code generator, when generating code markdown ensure to include the language e.g c# should start with ```csharp. dont give any explanations or description code only",
            AssistantContext = ""
    };
    Conversation Conversation = new Conversation();

    private void SetIsBusy(bool isBusy,string statusText = "")
    {
        this.IsBusy = isBusy;
        this.StatusText = statusText;
    }


    public async Task Search()
    {
        Conversation.AddItem("User", SearchModel.SearchText);

        var messagesRequest = new List<Message>()
        {
            Message.Create(ChatRoleType.System,SearchModel.SystemContext),
            Message.Create(ChatRoleType.Assistant, SearchModel.AssistantContext)
        };

        messagesRequest.Add(Message.Create(ChatRoleType.User, SearchModel.SearchText));

        Conversation.AddItem("AI", "");

        SetIsBusy(true, "Generating text..");

        try
        {
            await foreach (var result in OpenAIService.Chat.GetStream(messagesRequest, o =>
             {
                 o.N = 1;
                 o.MaxTokens = 2048;
             }))
            {
                this.Conversation.AppendToCurrentItem(result.Result!.Choices[0].Delta.Content);
                StateHasChanged();
            }

            SearchModel.AssistantContext += Conversation.GetCurrentItemMessage();
        }
        catch(Exception ex)
        {
            this.ErrorText = "An error has occurred";
        }
        finally
        {
            SetIsBusy(false);
        }
     

        
    }


    public async Task GenerateImage()
    {
        SetIsBusy(true, "Generating Image");

        var imageResponse = await OpenAIService.Images.Generate(SearchModel.SearchText, 1);
        if (imageResponse.IsSuccess)
        {
            this.Conversation.AddItem("AI", $@"<img src=""{imageResponse?.Result?.Data[0].Url}"" alt=""drawing"" width=""400"" />");
        }
        else
        {
            this.ErrorText = imageResponse.ErrorResponse?.Error?.Message;
        }
        this.SetIsBusy(false);
    }


    private async Task OnHideSidePanelClicked()
    {
        this.IsConverstionContextVisible = !this.IsConverstionContextVisible;
    }

}