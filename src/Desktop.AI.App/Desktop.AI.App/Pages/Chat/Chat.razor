@page "/"
@using Desktop.AI.App.Models;
@using Desktop.AI.App.Pages.Chat.components
@using OpenAI.Net;
@inject IOpenAIService OpenAIService

<div class="chat-container">
   

    <div class="chat">
        <ConversationView Conversation="Conversation"></ConversationView>

        <div class="input-area">

            <ChatInput SearchModel="@SearchModel" OnGenerateTextCompletionSubmitted="Search" IsBusy="@IsBusy"></ChatInput>

        </div>
    </div>

</div>


@code{

    private bool IsBusy = false;

    SearchModel SearchModel = new SearchModel()
    {
            SearchText = "write me a simple class that adds 2 numbers together and write a unit text using xunit to test it",
            SystemContext = "You are a code generator, when generating code markdown ensure to include the language e.g c# should start with ```csharp. dont give any explanations or description code only",
            AssistantContext = ""
    };
    Conversation Conversation = new Conversation();


    public async Task Search()
    {
        Conversation.AddItem("User", SearchModel.SearchText);

        var messagesRequest = new List<Message>()
        {
            Message.Create(ChatRoleType.System,SearchModel.SystemContext),
            Message.Create(ChatRoleType.Assistant, SearchModel.AssistantContext)
        };

        messagesRequest.Add(Message.Create(ChatRoleType.User, SearchModel.SearchText));

        Conversation.AddItem("AI", "");

        await foreach (var result in OpenAIService.Chat.GetStream(messagesRequest, o =>
           {
               o.N = 1;
               o.MaxTokens = 2048;
           }))
        {
            this.Conversation.ConversationHistory[this.Conversation.ConversationHistory.Count - 1].Message += result.Result!.Choices[0].Delta.Content;
            StateHasChanged();
        }

        SearchModel.AssistantContext += this.Conversation.ConversationHistory[this.Conversation.ConversationHistory.Count - 1];


    }




}