# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        configuration: [Release]
        os: [ubuntu-latest, macos-latest, windows-latest]
  

    env:
      Solution_Name: src/Desktop.AI.App/Desktop.AI.App.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Wap_Project_Directory: src/Desktop.AI.App/Desktop.AI.App    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: src/Desktop.AI.App/Desktop.AI.App.csproj                  # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core 5 For Electron CLI
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 5.0.x
        
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x


    # Build
    - name: Build
      run: dotnet build src/Desktop.AI.App/Desktop.AI.App.sln --configuration Release 
     
    - name: Restore Electron Tools
      run: dotnet tool restore
      working-directory: src/Desktop.AI.App/Desktop.AI.App
      
    - name: Build Electron Windows
      if: matrix.os == 'windows-latest'
      run: dotnet electronize build /target win
      working-directory: src/Desktop.AI.App/Desktop.AI.App

   - name: Build Electron MacOs
      if: matrix.os == 'macos-latest'
      run: dotnet electronize build /target osx
      working-directory: src/Desktop.AI.App/Desktop.AI.App

   - name: Build Electron Linux (ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: dotnet electronize build /target linux
      working-directory: src/Desktop.AI.App/Desktop.AI.App
     
    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts Windows
      uses: actions/upload-artifact@v3
      with:
        name: Windows Package
        path: src/Desktop.AI.App/Desktop.AI.App/bin/desktop/Desktop.AI.App*.exe

    - name: Upload build artifacts MacOS
      uses: actions/upload-artifact@v3
      with:
        name: MacOS Package
        path: src/Desktop.AI.App/Desktop.AI.App/bin/desktop/Desktop.AI.App*.dmg

    - name: Upload build artifacts Linux
      uses: actions/upload-artifact@v3
      with:
        name: Linux Package
        path: src/Desktop.AI.App/Desktop.AI.App/bin/desktop/Desktop.AI.App*.tar.gz

